target C {
    threading: false,
    build: "../scripts/build_nxp_unix.sh",
};

main reactor {
    preamble {=
	#include "../../SDK_2_12_0_FRDM-K22F/devices/MK22F51212/fsl_device_registers.h"
	#include "../../SDK_2_12_0_FRDM-K22F/devices/MK22F51212/utilities/debug_console_lite/fsl_debug_console.h"
	#include "../../SDK_2_12_0_FRDM-K22F/boards/frdmk22f/demo_apps/led_blinky/clock_config.h"
	#include "../../SDK_2_12_0_FRDM-K22F/boards/frdmk22f/demo_apps/led_blinky/board.h"
    #include "../../SDK_2_12_0_FRDM-K22F/boards/frdmk22f/demo_apps/led_blinky/pin_mux.h"
	#include "../../SDK_2_12_0_FRDM-K22F/devices/MK22F51212/drivers/fsl_common.h"
    #include "../../SDK_2_12_0_FRDM-K22F/devices/MK22F51212/drivers/fsl_gpio.h"
    #include "../../SDK_2_12_0_FRDM-K22F/devices/MK22F51212/drivers/fsl_port.h"
    #include "../../../../SDK_2_12_0_FRDM-K22F/devices/MK22F51212/drivers/fsl_smc.h"
    #define SMC_BASEADDR SMC
    =}

    timer t(1 sec,2 sec)
    state count:int(0);

    reaction(startup) {=
        PRINTF("Starting...\r\n");
    =}

    reaction(t) {=
        if (self->count == 1){
            /* Enter low power mode (Wait mode), exit upon any interrupt */
            SMC_PreEnterWaitModes();
            SMC_SetPowerModeWait(SMC_BASEADDR);
            self->count = 0;
        } else {
            interval_t start = lf_time_physical_elapsed();
            SMC_PostExitWaitModes();
            /* Recover normal power mode (Run mode) */
            SMC_SetPowerModeRun(SMC_BASEADDR);
            while (kSMC_PowerStateRun != SMC_GetPowerModeState(SMC))
            {
            }
            self->count = 1;
        }
    =}
}
